services:
  api:
    build:
      context: .
      dockerfile: Dockerfile # Assumes Dockerfile is in the root context
    ports:
      - "8000:8000"
    volumes:
      - ./:/app # Mounts the current directory to /app in the container
      - pip-cache:/root/.cache/pip # Named volume for pip cache
      - venv:/app/.venv # Named volume for the virtual environment
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - STORAGE_PATH=/app/storage
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Pass through OpenAI API key
      - APP_ENV=development
      - PYTHONPATH=/app # Ensures Python can find modules in /app
    depends_on:
      - qdrant # Ensures qdrant starts before the api service
    # Command to set up the virtual environment, activate it, and run the application
    command: >
      bash -c "set -e && \
        echo '--- API Service: Setting up virtual environment ---' && \
        bash scripts/setup_venv.sh && \
        echo '--- API Service: Activating virtual environment ---' && \
        source .venv/bin/activate && \
        echo '--- API Service: Starting Uvicorn server ---' && \
        exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s # Gives the service time to start before healthchecks begin

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333" # Port for gRPC
      - "6334:6334" # Port for HTTP REST API
    volumes:
      - qdrant_data:/qdrant/storage # Named volume for qdrant data persistence
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"] # Qdrant health check endpoint
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  cli:
    build:
      context: .
      dockerfile: Dockerfile # Can use the same Dockerfile if appropriate
    volumes:
      - ./:/app
      - pip-cache:/root/.cache/pip
      - venv:/app/.venv # Share the same virtual environment volume
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - STORAGE_PATH=/app/storage
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_BASE_URL=http://api:8000
      - APP_ENV=development
      - PYTHONPATH=/app
    depends_on:
      - qdrant # CLI might interact with qdrant
      - api    # CLI might interact with the api service
    # Command to set up and activate the venv, then drop into bash
    # This provides an interactive shell with the venv ready.
    command: >
      bash -c "set -e && \
        echo '--- CLI Service: Setting up virtual environment ---' && \
        bash scripts/setup_venv.sh && \
        echo '--- CLI Service: Activating virtual environment ---' && \
        source .venv/bin/activate && \
        echo '--- CLI Service: Virtual environment ready. Dropping into bash. ---' && \
        exec bash"
    stdin_open: true # Keeps STDIN open for interactive use (docker attach)
    tty: true        # Allocates a pseudo-TTY (docker attach)

volumes:
  qdrant_data: # Defines the named volume for qdrant
  pip-cache:   # Defines the named volume for pip cache
  venv:        # Defines the named volume for the Python virtual environment
